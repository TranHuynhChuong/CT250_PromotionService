import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { KHUYEN_MAI, CHI_TIET_KHUYEN_MAI } from './productPromotion.schema';
import {
  CreateKhuyenMaiDto,
  UpdateKhuyenMaiDto,
  CreateChiTietKhuyenMaiDto,
  UpdateChiTietKhuyenMaiDto,
} from './productPromotion.dto';

@Injectable()
export class KhuyenMaiService {
  constructor(
    @InjectModel(KHUYEN_MAI.name) private khuyenMaiModel: Model<KHUYEN_MAI>,
    @InjectModel(CHI_TIET_KHUYEN_MAI.name)
    private chiTietKhuyenMaiModel: Model<CHI_TIET_KHUYEN_MAI>
  ) {}

  async create(
    khuyenMaiDto: CreateKhuyenMaiDto,
    chiTietKhuyenMaiDto: CreateChiTietKhuyenMaiDto[]
  ): Promise<{ success: boolean; data?: any; error?: string }> {
    const session = await this.khuyenMaiModel.startSession();
    session.startTransaction(); // B·∫Øt ƒë·∫ßu transaction

    try {
      // Ki·ªÉm tra xem m√£ khuy·∫øn m√£i ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingKM = await this.khuyenMaiModel.findOne(
        { ma_KM: khuyenMaiDto.ma_KM },
        null,
        { session }
      );

      if (existingKM) {
        await session.abortTransaction(); // H·ªßy b·ªè transaction n·∫øu t·ªìn t·∫°i
        session.endSession();
        return {
          success: false,
          error: `M√£ khuy·∫øn m√£i ${khuyenMaiDto.ma_KM} ƒë√£ t·ªìn t·∫°i`,
        };
      }

      // T·∫°o khuy·∫øn m√£i m·ªõi
      const khuyenMai = await this.khuyenMaiModel.create([khuyenMaiDto], {
        session,
      });

      // N·∫øu c√≥ chi ti·∫øt khuy·∫øn m√£i, th√™m v√†o
      let chiTietKhuyenMais;
      if (chiTietKhuyenMaiDto.length > 0) {
        const chiTietList = chiTietKhuyenMaiDto.map((item) => ({
          idKhuyenMai_KM: khuyenMai[0]._id, // V√¨ `create()` tr·∫£ v·ªÅ m·∫£ng khi d√πng `session`
          ...item,
        }));

        chiTietKhuyenMais = await this.chiTietKhuyenMaiModel.insertMany(
          chiTietList,
          { session }
        );
      }

      await session.commitTransaction(); // X√°c nh·∫≠n transaction
      session.endSession();

      return {
        success: true,
        data: { khuyenMai: khuyenMai[0], chiTietKhuyenMais },
      };
    } catch (error) {
      await session.abortTransaction(); // H·ªßy b·ªè transaction n·∫øu c√≥ l·ªói
      session.endSession();
      return {
        success: false,
        error: `L·ªói khi t·∫°o khuy·∫øn m√£i: ${error.message}`,
      };
    }
  }

  async update(
    idKhuyenMai: string,
    khuyenMaiDto: UpdateKhuyenMaiDto,
    chiTietKhuyenMaiDto: UpdateChiTietKhuyenMaiDto[]
  ) {
    // Ki·ªÉm tra xem khuy·∫øn m√£i c√≥ t·ªìn t·∫°i kh√¥ng
    const khuyenMai = await this.khuyenMaiModel.findById(idKhuyenMai);
    if (!khuyenMai) {
      throw new NotFoundException('Khuy·∫øn m√£i kh√¥ng t·ªìn t·∫°i');
    }

    // C·∫≠p nh·∫≠t th√¥ng tin khuy·∫øn m√£i
    await this.khuyenMaiModel.findByIdAndUpdate(idKhuyenMai, khuyenMaiDto);

    // X√≥a chi ti·∫øt khuy·∫øn m√£i c≈© tr∆∞·ªõc khi th√™m m·ªõi
    await this.chiTietKhuyenMaiModel.deleteMany({
      idKhuyenMai_KM: khuyenMai._id,
    });

    // Th√™m danh s√°ch chi ti·∫øt khuy·∫øn m√£i m·ªõi
    if (chiTietKhuyenMaiDto.length > 0) {
      const chiTietList = chiTietKhuyenMaiDto.map((item) => ({
        idKhuyenMai_KM: khuyenMai._id,
        ...item,
      }));

      await this.chiTietKhuyenMaiModel.insertMany(chiTietList);
    }

    return { message: 'C·∫≠p nh·∫≠t khuy·∫øn m√£i th√†nh c√¥ng' };
  }

  async delete(idKhuyenMai: string) {
    // Ki·ªÉm tra xem khuy·∫øn m√£i c√≥ t·ªìn t·∫°i kh√¥ng
    const khuyenMai = await this.khuyenMaiModel.findById(idKhuyenMai);
    if (!khuyenMai) {
      throw new NotFoundException('Khuy·∫øn m√£i kh√¥ng t·ªìn t·∫°i');
    }

    // X√≥a t·∫•t c·∫£ chi ti·∫øt khuy·∫øn m√£i li√™n quan
    await this.chiTietKhuyenMaiModel.deleteMany({
      idKhuyenMai_KM: khuyenMai._id,
    });

    // X√≥a khuy·∫øn m√£i
    await this.khuyenMaiModel.findByIdAndDelete(khuyenMai._id);

    return { message: 'X√≥a khuy·∫øn m√£i th√†nh c√¥ng' };
  }

  // L·∫•y danh s√°ch khuy·∫øn m√£i
  async getAll(): Promise<any[]> {
    // L·∫•y danh s√°ch khuy·∫øn m√£i
    const khuyenMais = await this.khuyenMaiModel.find().exec();

    // L·∫•y chi ti·∫øt khuy·∫øn m√£i cho t·ª´ng khuy·∫øn m√£i
    const result = await Promise.all(
      khuyenMais.map(async (khuyenMai) => {
        const chiTietKhuyenMai = await this.chiTietKhuyenMaiModel
          .find({ idKhuyenMai_KM: khuyenMai._id })
          .exec();

        return {
          ...khuyenMai.toObject(),
          chiTietKhuyenMai,
        };
      })
    );

    return result;
  }

  // L·∫•y th√¥ng tin khuy·∫øn m√£i theo m√£
  async find(id_KM: string): Promise<KHUYEN_MAI> {
    const khuyenMai = await this.khuyenMaiModel
      .findById(id_KM)
      .populate('idKhuyenMai_KM')
      .lean();

    if (!khuyenMai) {
      throw new NotFoundException('Khuy·∫øn m√£i kh√¥ng t·ªìn t·∫°i');
    }

    return khuyenMai;
  }

  async getUsablePromotionOfProduct(idSanPham: string): Promise<any> {
    const currentDate = new Date();

    const promotions = await this.chiTietKhuyenMaiModel
      .find({
        idSanPham_KM: idSanPham,
        soLuong_KM: { $gt: 0 }, // Ch·ªâ l·∫•y khuy·∫øn m√£i c√≤n s·ªë l∆∞·ª£ng
      })
      .populate({
        path: 'idKhuyenMai_KM', // L·∫•y th√¥ng tin khuy·∫øn m√£i
        match: {
          ngayBatDau_KM: { $lte: currentDate }, // ƒê√£ b·∫Øt ƒë·∫ßu
          ngayKetThuc_KM: { $gte: currentDate }, // Ch∆∞a k·∫øt th√∫c
        },
      })
      .lean()
      .exec();

    return promotions[0];
  }

  async getProductsOfUsablePromotion(): Promise<string[]> {
    const now = new Date();

    // L·∫•y t·∫•t c·∫£ chi ti·∫øt khuy·∫øn m√£i v√† populate khuy·∫øn m√£i t∆∞∆°ng ·ª©ng
    const khuyenMaiHieuLuc = await this.chiTietKhuyenMaiModel
      .find({})
      .populate('idKhuyenMai_KM');

    // L·ªçc ra nh·ªØng chi ti·∫øt khuy·∫øn m√£i c√≥ hi·ªáu l·ª±c
    const sanPhamDangKM = khuyenMaiHieuLuc
      .filter((ctkm) => {
        const km = ctkm.idKhuyenMai_KM as unknown as KHUYEN_MAI;
        return now >= km.ngayBatDau_KM && now <= km.ngayKetThuc_KM;
      })
      .map((ctkm) => ctkm.idSanPham_KM); // Ch·ªâ l·∫•y id s·∫£n ph·∫©m

    return sanPhamDangKM;
  }

  async capNhatSoLuongSanPhamKhuyenMai(
    dsSP: {
      idSanPham_CTHD: string;
      idTTBanHang_CTHD: string;
      soLuong_CTHD: number;
      giaMua_CTHD: number;
    }[],
    hoanLai: boolean = false
  ): Promise<{ success: boolean; data?: any; error?: string }> {
    if (dsSP.length === 0) {
      return { success: false, error: 'Danh s√°ch s·∫£n ph·∫©m r·ªóng' };
    }

    const danhSachIdTTBanHang = dsSP.map((sp) => sp.idTTBanHang_CTHD);

    // üîç Truy v·∫•n t·∫•t c·∫£ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i 1 l·∫ßn duy nh·∫•t
    const danhSachKhuyenMai = await this.chiTietKhuyenMaiModel.find({
      idSanPham_KM: { $in: danhSachIdTTBanHang },
    });

    if (danhSachKhuyenMai.length !== danhSachIdTTBanHang.length) {
      return {
        success: false,
        error: 'C√≥ s·∫£n ph·∫©m kh√¥ng c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·ª£p l·ªá',
      };
    }

    const newdsSP: {
      idSanPham_CTHD: string;
      idTTBanHang_CTHD: string;
      soLuong_CTHD: number;
      giaMua_CTHD: number;
    }[] = [];

    for (const sp of dsSP) {
      const promotion = danhSachKhuyenMai.find(
        (p) => p.idSanPham_KM.toString() === sp.idTTBanHang_CTHD
      );
      if (!promotion) {
        return {
          success: false,
          error: `Kh√¥ng t√¨m th·∫•y khuy·∫øn m√£i cho s·∫£n ph·∫©m ${sp.idTTBanHang_CTHD}`,
        };
      }

      if (!hoanLai) {
        if (
          promotion.gioiHanDatHang_KM &&
          sp.soLuong_CTHD > promotion.gioiHanDatHang_KM
        ) {
          return {
            success: false,
            error: `S·∫£n ph·∫©m ${sp.idTTBanHang_CTHD} v∆∞·ª£t gi·ªõi h·∫°n √°p d·ª•ng`,
          };
        }
        if (
          promotion.soLuong_KM &&
          promotion.soLuong_KM <= 0 &&
          sp.soLuong_CTHD > promotion.soLuong_KM
        ) {
          return {
            success: false,
            error: `S·∫£n ph·∫©m ${sp.idTTBanHang_CTHD} kh√¥ng ƒë·ªß ƒë·ªÉ √°p d·ª•ng gi√° gi·∫£m`,
          };
        }

        // üîç T√≠nh gi√° b√°n m·ªõi
        let giaMuaMoi = sp.giaMua_CTHD;
        if (promotion.tyLeGiam_KM) {
          giaMuaMoi = sp.giaMua_CTHD * (1 - promotion.tyLeGiam_KM / 100);
        }
        if (promotion.mucGiam_KM) {
          giaMuaMoi = Math.max(giaMuaMoi - promotion.mucGiam_KM, 0); // Ch·∫∑n gi√° √¢m
        }

        newdsSP.push({
          idSanPham_CTHD: sp.idSanPham_CTHD,
          idTTBanHang_CTHD: sp.idTTBanHang_CTHD,
          soLuong_CTHD: sp.soLuong_CTHD,
          giaMua_CTHD: giaMuaMoi,
        });
      }
    }

    // üîÑ Th·ª±c hi·ªán c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong khuy·∫øn m√£i
    const bulkUpdate = dsSP.map((sp) => ({
      updateOne: {
        filter: { idSanPham_KM: sp.idTTBanHang_CTHD },
        update: {
          $inc: { soLuong_KM: hoanLai ? sp.soLuong_CTHD : -sp.soLuong_CTHD },
        },
      },
    }));

    await this.chiTietKhuyenMaiModel.bulkWrite(bulkUpdate);

    if (hoanLai) {
      return {
        success: true,
      };
    } else {
      return {
        success: true,
        data: newdsSP,
      };
    }
  }
}
